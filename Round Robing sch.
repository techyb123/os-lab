#include <stdio.h>

typedef struct {
    int pid, arrival_time, burst_time, remaining_time;
} Process;

void findWaitingTime(Process[], int, int[], int);
void findTurnAroundTime(int[], int[], int, Process[]);
void findAverageTimes(int, int[], int[], int[], int[], Process[]);

int main() {
    int n, q;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    int arrival_time[n], burst_time[n];
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d%d", &arrival_time[i], &burst_time[i]);
        processes[i].pid = i + 1;
        processes[i].arrival_time = arrival_time[i];
        processes[i].burst_time = burst_time[i];
        processes[i].remaining_time = burst_time[i];
    }
    printf("Enter time quantum: ");
    scanf("%d", &q);

    int waiting_time[n], turnaround_time[n];
    for (int i = 0; i < n; i++) {
        waiting_time[i] = 0;
        turnaround_time[i] = 0;
    }

    findWaitingTime(processes, n, waiting_time, q);
    findTurnAroundTime(turnaround_time, waiting_time, n, processes);
    findAverageTimes(n, arrival_time, burst_time, turnaround_time, waiting_time, processes);

    return 0;
}

void findWaitingTime(Process processes[], int n, int waiting_time[], int q) {
    int counter = 0, time = 0;
    while (counter < n) {
        if (processes[counter].remaining_time > q) {
            time += q;
            processes[counter].remaining_time -= q;
            for (int i = 0; i < n; i++) {
                if (processes[i].remaining_time > 0 && processes[i].arrival_time <= time && i != counter) {
                    if (waiting_time[i] < time - processes[i].arrival_time) {
                        waiting_time[i] = time - processes[i].arrival_time;
                    }
                }
            }
            counter++;
        } else {
            time += processes[counter].remaining_time;
            processes[counter].remaining_time = 0;
            for (int i = 0; i < n; i++) {
                if (processes[i].remaining_time > 0 && processes[i].arrival_time <= time && i != counter) {
                    if (waiting_time[i] < time - processes[i].arrival_time) {
                        waiting_time[i] = time - processes[i].arrival_time;
                    }
                }
            }
            if (processes[counter].remaining_time == 0) {
                counter++;
            }
        }
    }
}

void findTurnAroundTime(int turnaround_time[], int waiting_time[], int n, Process processes[]) {
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = waiting_time[i] + processes[i].burst_time;
    }
}

void findAverageTimes(int n, int arrival_time[], int burst_time[], int turnaround_time[], int waiting_time[], Process processes[]) {
    float total_waiting_time = 0, total_turnaround_time = 0;
    printf("\nProcess\tArrival Time\tBurst Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, arrival_time[i], burst_time[i], turnaround_time[i]);
    }
    printf("\nAverage waiting time = %.2f\n", total_waiting_time / n);
    printf("Average turnaround time = %.2f\n", total_turnaround_time / n);
}
